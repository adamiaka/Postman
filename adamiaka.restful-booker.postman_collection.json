{
	"info": {
		"_postman_id": "9fdd61b7-af4d-4cd1-a843-c3bc6dc11f18",
		"name": "adamiaka restful-booker",
		"description": "A sample collection to demonstrate Postman's capabilities in test data generation, creation of test cases and test assertions.  \nThe collection uses the free API: [https://restful-booker.herokuapp.com/apidoc/index.html](https://restful-booker.herokuapp.com/apidoc/index.html)  \nPlease check the description of each TC to find out what is going on in each test.\n\nAll tests should be run using Postman Runner.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24150931",
		"_collection_link": "https://www.postman.com/adamiakateam/workspace/adamiaka/collection/24150931-9fdd61b7-af4d-4cd1-a843-c3bc6dc11f18?action=share&source=collection_link&creator=24150931"
	},
	"item": [
		{
			"name": "TC001 - Get Random Booking",
			"item": [
				{
					"name": "1. Get All Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Basic Checks\r",
									"//1. Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Check Content-Type header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//3. Checking the Content Type\r",
									"pm.test(\"Content-Type header check\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//Body Checks\r",
									"//1. Get random booking ID and save it as variable and env variable\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"//function is selecting element from array (random array from various nested arrays)\r",
									"function randomElementFromArray(inputArray) {\r",
									"    return inputArray[Math.floor(Math.random() * inputArray.length)];\r",
									"}\r",
									"var random = randomElementFromArray(response);\r",
									"randomBookingId = random.bookingid;\r",
									"pm.environment.set(\"randomBookingId\", randomBookingId);\r",
									"\r",
									"//alternative - random from selected range\r",
									"// pm.environment.set(\"randomBookingId\", _.random(0, 33))\r",
									"// let randomBookingId = pm.environment.get(\"randomBookingId\")\r",
									"\r",
									"console.log(\"Random Booking Id: \" + randomBookingId)\r",
									"\r",
									"\r",
									"\r",
									"//2. Checking if Booking id is a string\r",
									"pm.test(\"Booking id type check\", function () {\r",
									"    pm.expect(typeof (randomBookingId) === \"number\").to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//Set next request\r",
									"if (pm.expect(randomBookingId).to.have.property) {\r",
									"    postman.setNextRequest(\"2. Get Random Booking\");\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Random booking id has not been generated.\", () => { throw new Error(\"Random booking id is not present!\") });\r",
									"    postman.setNextRequest(null)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": null,
									"disabled": true
								},
								{
									"key": "lastname",
									"value": null,
									"disabled": true
								},
								{
									"key": "checkin",
									"value": null,
									"disabled": true
								},
								{
									"key": "checkout",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Get Random Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Various tests for response status\r",
									"\r",
									"//This checks the status code number\r",
									"pm.test(\"Test 1: 200 Status Code\", () => pm.response.to.have.status(200))\r",
									"\r",
									"//This checks the status text string\r",
									"pm.test(\"Test 2: 200 Status Code\", () => pm.response.to.have.status(\"OK\"))\r",
									"\r",
									"//This is using a pre-defined rule offered by Postman\r",
									"pm.test(\"Test 3: 200 Status Code\", () => pm.response.to.be.ok)\r",
									"\r",
									"//This is using a different rule offered by Postman (.code) and checking that it equals 200\r",
									"pm.test(\"Test 4: 200 Status Code\", () => pm.expect(pm.response.code).to.equal(200))\r",
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"//Verify Booking data format\r",
									"pm.test(\"Booking data format is correct\", () => {\r",
									"\r",
									"    pm.expect(response.firstname).to.be.a(\"string\")\r",
									"    pm.expect(response.lastname).to.be.a(\"string\")\r",
									"    pm.expect(response.totalprice).to.a(\"number\")\r",
									"    pm.expect(response.depositpaid).to.be.a(\"boolean\")\r",
									"    pm.expect(response.bookingdates.checkin).to.be.a(\"string\")\r",
									"    pm.expect(response.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/)\r",
									"    pm.expect(response.bookingdates.checkout).to.be.a(\"string\")\r",
									"    pm.expect(response.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/)\r",
									"});\r",
									"\r",
									"//If Additional needs are present, verify that value is string\r",
									"if (response.additionalneeds === undefined) {\r",
									"\r",
									"    pm.test.skip(\"Customer has no additional needs\", () => {\r",
									"        return\r",
									"    })\r",
									"} else {\r",
									"    pm.test(\"Customer has additional needs, data has correct format (string)\", () => {\r",
									"        pm.expect(response.additionalneeds).to.be.a(\"string\")\r",
									"    })\r",
									"}\r",
									"\r",
									"//Verify that checkin date is before checkout date and console log additional info\r",
									"let checkinDate = (response.bookingdates.checkin);\r",
									"let checkoutDate = (response.bookingdates.checkout);\r",
									"\r",
									"if (checkinDate < checkoutDate) {\r",
									"    console.log(\"Checkin date \" + checkinDate + \" is earlier than Checkout date \" + checkoutDate);\r",
									"    pm.test(\"Checkin date is earlier than checkout date\");\r",
									"}\r",
									"else {\r",
									"    console.log(\"Checkin date \" + checkinDate + \" is not earlier than Checkout date \" + checkoutDate);\r",
									"    pm.test(\"Booking dates are incorrect\", function () {\r",
									"        pm.expect.fail(\"Checkin date is not earlier than checkout date\");\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/booking/{{randomBookingId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{randomBookingId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test verifies if it is possible to GET list of all Booking Ids and GET details of one random booking.\n\nThe first request contains assertions to check if the API response is correctly constructed and contains correct info.\n\nAfter that it chooses randomly one booking id from all listed bookings (alternative method are also included).\n\nSecond request verifies if ranomy chosen booking contains correct data types and also include other logic assertions like for example check, if check in date is older than check out date."
		},
		{
			"name": "TC002 - Create New Booking",
			"item": [
				{
					"name": "1. Create New Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate random data\r",
									"\r",
									"//wait 3 seconds before running request\r",
									"setTimeout(function(){}, [3000]);\r",
									"\r",
									"//generate random number between 100-1000\r",
									"pm.environment.set(\"totalPrice\", _.random(100, 1000))\r",
									"//alternative: {{$randomInt}} from Postman faker library - random integer between 0 and 1000\r",
									"\r",
									"//generate random additional need from array\r",
									"const additionalNeeds = [\"Jacuzzi\", \"Massage\", \"Fresh flowers\", \"Gym\", \"Newspaper\"];\r",
									"pm.environment.set(\"additionalNeeds\", additionalNeeds[Math.floor(Math.random() * additionalNeeds.length)]);\r",
									"//alternative:\r",
									"//pm.environment.set(\"additionalNeeds\", _.shuffle(additionalNeeds)[0]);\r",
									"\r",
									"\r",
									"//generate random dates, checkOut date 1-21 days after checkIn date\r",
									"const moment = require(\"moment\")\r",
									"pm.environment.set(\"checkIn\", moment().format(\"YYYY-MM-DD\"))\r",
									"pm.environment.set(\"checkOut\", moment().add(_.random(1, 21), \"days\").format(\"YYYY-MM-DD\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"//Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Verify Booking data format\r",
									"pm.test(\"Booking data format is correct\", () => {\r",
									"    pm.expect(response.bookingid).to.be.a(\"number\")\r",
									"    pm.expect(response.booking.firstname).to.be.a(\"string\")\r",
									"    pm.expect(response.booking.lastname).to.be.a(\"string\")\r",
									"    pm.expect(response.booking.totalprice).to.a(\"number\")\r",
									"    pm.expect(response.booking.depositpaid).to.be.a(\"boolean\")\r",
									"    pm.expect(response.booking.bookingdates.checkin).to.be.a(\"string\")\r",
									"    pm.expect(response.booking.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/)\r",
									"    pm.expect(response.booking.bookingdates.checkout).to.be.a(\"string\")\r",
									"    pm.expect(response.booking.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/)\r",
									"});\r",
									"\r",
									"// Run request three times to create 3 different bookings and save 3 different booking ids in different variables\r",
									"\r",
									"//create iteration count\r",
									"let iterationCount = pm.environment.get(\"iterationCount\");\r",
									"if (iterationCount) {\r",
									"    iterationCount = Number(iterationCount);\r",
									"}\r",
									"else {\r",
									"    iterationCount = 0;\r",
									"}\r",
									"\r",
									"//create variable named bookingId + current iteration number\r",
									"let bookingId = response.bookingid;\r",
									"pm.environment.set(`bookingId${iterationCount}`, bookingId);\r",
									"iterationCount++;\r",
									"\r",
									"//collect all bookingIds in array for future use\r",
									"let bookingArray = pm.environment.get(\"bookingArray\");\r",
									"if (typeof bookingArray === \"undefined\") { bookingArray = [] }\r",
									"bookingArray.push(bookingId);\r",
									"pm.environment.set(\"bookingArray\", bookingArray)\r",
									"\r",
									"//Define iteration count number (for example (iterationCount <= 4) means that request will be repeated 5 times  \r",
									"if (iterationCount <= 2) { //\r",
									"    pm.environment.set(\"iterationCount\", iterationCount);\r",
									"    postman.setNextRequest(\"1. Create New Booking\");\r",
									"}\r",
									"\r",
									"//After all iterations are completed, set up next request and clean unused variables\r",
									"else {\r",
									"\r",
									"    //Create function to clean all variables\r",
									"\r",
									"    function cleanup() {\r",
									"        const clean = [\"totalPrice\", \"additionalNeeds\", \"checkIn\", \"checkOut\", \"iterationCount\"]\r",
									"        for (let i = 0; i < clean.length; ++i) {\r",
									"            pm.environment.unset(clean[i])\r",
									"        }\r",
									"    }\r",
									"    cleanup()\r",
									"\r",
									"    //Alternative way to clean variables\r",
									"    // pm.environment.unset(\"totalPrice\");\r",
									"    // pm.environment.unset(\"additionalNeeds\");\r",
									"    // pm.environment.unset(\"checkIn\");\r",
									"    // pm.environment.unset(\"checkOut\");\r",
									"    // pm.environment.unset(\"iterationCount\");\r",
									"\r",
									"    postman.setNextRequest(\"2. GET New Booking\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\",\r\n    \"totalprice\": {{$randomInt}},\r\n    \"depositpaid\": {{$randomBoolean}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkIn}}\",\r\n        \"checkout\": \"{{checkOut}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalNeeds}}\"\r\n}"
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. GET New Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Cycle through booking array and verify each id\r",
									"\r",
									"let bookingArray = pm.environment.get(\"bookingArray\");\r",
									"console.log(\"Booking Ids in array: \" + bookingArray)\r",
									"let currentBookingId = bookingArray.shift();\r",
									"console.log(\"Current Booking Id: \" + currentBookingId);\r",
									"pm.environment.set(\"currentBookingId\", currentBookingId);\r",
									"pm.environment.set(\"bookingArray\", bookingArray);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"//Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Verify Booking data format\r",
									"let currentBookingId = pm.environment.get(\"currentBookingId\");\r",
									"pm.test(\"Booking data format for \" + currentBookingId + \" is correct\", () => {\r",
									"    pm.expect(response.firstname).to.be.a(\"string\")\r",
									"    pm.expect(response.lastname).to.be.a(\"string\")\r",
									"    pm.expect(response.totalprice).to.a(\"number\")\r",
									"    pm.expect(response.depositpaid).to.be.a(\"boolean\")\r",
									"    pm.expect(response.bookingdates.checkin).to.be.a(\"string\")\r",
									"    pm.expect(response.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/)\r",
									"    pm.expect(response.bookingdates.checkout).to.be.a(\"string\")\r",
									"    pm.expect(response.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/)\r",
									"});\r",
									"\r",
									"\r",
									"//Cycle through booking array and verify each id, if booking array is empty, stop and clear variables\r",
									"let bookingArray = pm.environment.get(\"bookingArray\")\r",
									"if (bookingArray.length > 0) { postman.setNextRequest(\"2. GET New Booking\"); }\r",
									"else {\r",
									"    pm.environment.unset(\"token\");\r",
									"    pm.environment.unset(\"bookingArray\");\r",
									"    pm.environment.unset(\"currentBookingId\");\r",
									"    // pm.environment.unset(\"bookingId0\");\r",
									"    // pm.environment.unset(\"bookingId1\");\r",
									"    // pm.environment.unset(\"bookingId2\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{currentBookingId}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{currentBookingId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "The test verifies if it is possible to create new booking.\n\nFirst request generates new booking using random data. Some of it is generated by Postman dynamic variables (faker) others are generated using javascript in pre-request.  \nThe first request is repeated three times, IDs are saved into an array.\n\nA second request is using a previously created array with Booking IDs and verifies if data in response is correct.\n\nTest saves all created booking IDs for next tests.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "TC003 - Update Booking",
			"item": [
				{
					"name": "1. Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Save token valie in env variable\r",
									"const response = JSON.parse(responseBody);\r",
									"let token = response.token;\r",
									"pm.environment.set(\"token\", token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. GET Booking before update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"//Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Set whole request body as new variable\r",
									"pm.environment.set(\"bookingToUpdate\", response)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{bookingId0}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{bookingId0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Update Booking0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var body = pm.environment.get(\"bookingToUpdate\")\r",
									"\r",
									"//change deposit value\r",
									"if (body.depositpaid = false) {\r",
									"    body.depositpaid = pm.variables.replaceIn(true)\r",
									"}\r",
									"else if (body.depositpaid = true) {\r",
									"    body.depositpaid = pm.variables.replaceIn(false)\r",
									"}\r",
									"\r",
									"pm.environment.set(\"body\", JSON.stringify(body))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"//Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//save new value to variable\r",
									"pm.environment.set(\"depositpaid\", response.depositpaid);\r",
									"\r",
									"//clear variables\r",
									"pm.environment.unset(\"bookingToUpdate\");\r",
									"pm.environment.unset(\"body\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{body}}"
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{bookingId0}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{bookingId0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. GET Booking0 after update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"//Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Verify Booking data format\r",
									"pm.test(\"Booking data format is correct\", () => {\r",
									"    pm.expect(response.firstname).to.be.a(\"string\")\r",
									"    pm.expect(response.lastname).to.be.a(\"string\")\r",
									"    pm.expect(response.totalprice).to.a(\"number\")\r",
									"    pm.expect(response.depositpaid).to.be.a(\"boolean\")\r",
									"    pm.expect(response.bookingdates.checkin).to.be.a(\"string\")\r",
									"    pm.expect(response.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/)\r",
									"    pm.expect(response.bookingdates.checkout).to.be.a(\"string\")\r",
									"    pm.expect(response.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/)\r",
									"});\r",
									"\r",
									"\r",
									"//verify that deposit has been successfully updated\r",
									"if (response.depositpaid == pm.environment.get(\"depositpaid\")) {\r",
									"    pm.test(\"Deposit value has been successfully updated, new value: : \" + pm.environment.get(\"depositpaid\"), true);\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Deposit value update failed.\", function () { pm.expect.fail(\"Incorrect depost value :\" + pm.environment.get(\"depositpaid\")) });\r",
									"}\r",
									"\r",
									"//clear variables\r",
									"pm.environment.unset(\"depositpaid\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{bookingId0}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{bookingId0}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test verifies if it possible to update booking using the PUT method.  \nThe first request is generating authorization token.  \nA second request is getting whole response (whole booking info) and saving it into a variable.  \nOn the third request data is being updated - deposit value is being changed to the opposite.  \nLast request is verifying that the update was successful.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "TC004 - Partial Update Booking",
			"item": [
				{
					"name": "1. Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Save token valie in env variable\r",
									"const response = JSON.parse(responseBody);\r",
									"let token = response.token;\r",
									"pm.environment.set(\"token\", token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. GET Booking before update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"//Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//save total price before update \r",
									"let totalPriceBeforeUpdate = response.totalprice;\r",
									"pm.environment.set(\"totalPriceBeforeUpdate\", totalPriceBeforeUpdate);\r",
									"\r",
									"//add additional price depending on additional need \r",
									"let additionalNeeds = response.additionalneeds;\r",
									"let totalPrice = response.totalprice;\r",
									"\r",
									"switch (additionalNeeds) {\r",
									"    case \"Jacuzzi\":\r",
									"        var updatedTotalPrice = totalPrice + 100;\r",
									"        pm.environment.set(\"updatedTotalPrice\", updatedTotalPrice);\r",
									"        break;\r",
									"    case \"Massage\":\r",
									"        var updatedTotalPrice = totalPrice + 150;\r",
									"        pm.environment.set(\"updatedTotalPrice\", updatedTotalPrice);\r",
									"        break;\r",
									"    case \"Fresh flowers\":\r",
									"        var updatedTotalPrice = totalPrice + 25;\r",
									"        pm.environment.set(\"updatedTotalPrice\", updatedTotalPrice);\r",
									"        break;\r",
									"    case \"Gym\":\r",
									"        var updatedTotalPrice = totalPrice + 50;\r",
									"        pm.environment.set(\"updatedTotalPrice\", updatedTotalPrice);\r",
									"        break;\r",
									"    case \"Newspaper\":\r",
									"        var updatedTotalPrice = totalPrice + 10;\r",
									"        pm.environment.set(\"updatedTotalPrice\", updatedTotalPrice);\r",
									"        break;\r",
									"}\r",
									"\r",
									"//verify that additional price has been added\r",
									"if (updatedTotalPrice > totalPriceBeforeUpdate) {\r",
									"    pm.test(\"Additional price for \" + additionalNeeds + \" has been added: \" + (updatedTotalPrice - totalPriceBeforeUpdate), true);\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Additional price for \" + additionalNeeds + \" has not been added\" , () => { throw new Error(\"Incorrect total value\") });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{bookingId1}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{bookingId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Update Booking1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"//Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//check if total price has been updated\r",
									"pm.test(\"Total price has been updated\", function () {\r",
									"    pm.expect(response.totalprice).to.eql(pm.environment.get(\"updatedTotalPrice\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalprice\": {{updatedTotalPrice}}\r\n}"
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{bookingId1}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{bookingId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. GET Booking0 after update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"//Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Verify Booking data format\r",
									"pm.test(\"Booking data format is correct\", () => {\r",
									"    pm.expect(response.firstname).to.be.a(\"string\")\r",
									"    pm.expect(response.lastname).to.be.a(\"string\")\r",
									"    pm.expect(response.totalprice).to.a(\"number\")\r",
									"    pm.expect(response.depositpaid).to.be.a(\"boolean\")\r",
									"    pm.expect(response.bookingdates.checkin).to.be.a(\"string\")\r",
									"    pm.expect(response.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/)\r",
									"    pm.expect(response.bookingdates.checkout).to.be.a(\"string\")\r",
									"    pm.expect(response.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/)\r",
									"});\r",
									"\r",
									"//verify that additional price has been added\r",
									"pm.test(\"Total price has been updated\", function () {\r",
									"    pm.expect(response.totalprice).to.eql(pm.environment.get(\"updatedTotalPrice\"));\r",
									"});\r",
									"\r",
									"//clear variables\r",
									"pm.environment.unset(\"bookingToUpdate\");\r",
									"pm.environment.unset(\"totalPriceBeforeUpdate\");\r",
									"pm.environment.unset(\"updatedTotalPrice\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{bookingId1}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{bookingId1}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test verifies if it possible to update booking using the PATCH method.  \nThe first request is generating authorization token.  \nA second request is getting booking that's going to be updated and it is setting the new total price depending on what is listed in \"additional need\" field.  \nOn the third request data is being updated - additional need price is being added to total price.  \nLast request is verifying that the update was successful.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "TC005 - Delete Booking",
			"item": [
				{
					"name": "1. Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Save token valie in env variable\r",
									"const response = JSON.parse(responseBody);\r",
									"let token = response.token;\r",
									"pm.environment.set(\"token\", token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. GET Booking before delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"//Check Status\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{bookingId2}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{bookingId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Delete Booking2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check Status\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{bookingId2}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{bookingId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. GET Booking2 after delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check Status\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{bookingId2}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{bookingId2}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test verifies if it possible to delete booking using the DELETE method.  \nThe first request is generating authorization token.  \nA second request is getting booking that's going to be deleted.  \nAt the third request booking data is being deleted.  \nLast request is verifying that booking have been successfully deleted.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "PING",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"Created\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/ping",
					"host": [
						"{{url}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	]
}